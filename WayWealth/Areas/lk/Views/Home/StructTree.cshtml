@model StructureView
@using W2W.ModelKBT.Entities
@using WayWealth.Areas.lk.ViewModels.Home
@{
    Layout = "~/Areas/lk/Views/Home/_StructLayout.cshtml";
    var Items = ViewBag.Items as IEnumerable<MarketingPlaceView>;
    var first = Items.OrderBy(p => p.hash.Length).FirstOrDefault();

    var Investments = ViewBag.Investments as Dictionary<uint, decimal>;
    var Rewards = ViewBag.Rewards as Dictionary<uint, decimal>;
    var LevelValue = ViewBag.LevelValue as Dictionary<int, decimal>;
    var StructValue = ViewBag.StructValue as Dictionary<uint, decimal>;
    var StructRewards = ViewBag.StructRewards as Dictionary<uint, decimal>;
}

<div class="tree-block">
    @Html.Partial("_StructTools", Model)
    <div class="scale-block">
        <a class="all_tree_btn"><span data-text="@Resources.Resource.ExpandStructure">@Resources.Resource.ExpandStructure</span></a>
        <p>@Resources.Resource.Scale</p>
        <div id="scale-range" class="scale-pips"></div>
    </div>
    <div class="tree2">
        @helper CreateItems(MarketingPlaceView place, IEnumerable<MarketingPlaceView> structure, int level,
                                                                                        Dictionary<uint, decimal> investments, 
                                                                                        Dictionary<uint, decimal> rewards,
                                                                                        Dictionary<int, decimal> levelvalue,
                                                                                        Dictionary<uint, decimal> structvalue,
                                                                                        Dictionary<uint, decimal> structrewards)
            {
        <a class="item"
           data-name="@place.ObjectName"
           data-deep="@level"
           data-filled="@place.FilledLevels"
           data-loginorid="@(string.IsNullOrWhiteSpace(place.PartnerLogin) ? place.PartnerPersonalId.ToString() : place.PartnerPersonalId.ToString() + " / " + place.PartnerLogin)"
           data-level-value="@((levelvalue.ContainsKey(level) ? levelvalue[level] : 0).ToString("N2"))"
           data-investments="@((investments.ContainsKey(place.PartnerId.Value) ? investments[place.PartnerId.Value] : 0).ToString("N2"))"
           data-rewards="@((rewards.ContainsKey(place.id_object) ? rewards[place.id_object] : 0 ).ToString("N2"))"
           data-struct-value="@((structvalue.ContainsKey(place.id_object) ? structvalue[place.id_object] : 0).ToString("N2"))"
           data-struct-rewards="@((structrewards.ContainsKey(place.id_object) ? structrewards[place.id_object] : 0).ToString("N2"))">
            <p>@(string.IsNullOrWhiteSpace(place.Rank) ? place.ShortName : place.ShortName + " (" + place.Rank + ")")</p>
            <div class="flex">
                <span>@(structure.Count(x => x.hash.StartsWith(place.hash)) - 1)</span>
                <i></i>
            </div>
        </a>

                var childs = structure
                    .Where(p => p.id_parent == place.id_object)
                    .OrderBy(p => p.SortPosition);


                if (childs.Count() > 0)
                {
                    <ul>
                        @foreach (var child in childs)
                        {
                            <li>
                                @CreateItems(child, structure, level + 1, investments, rewards, levelvalue, structvalue, structrewards)
                            </li>
                        }
                    </ul>
                }
}

        @if (Items != null && Items.Count() > 0)
        {
            <ul>
                <li>

                    @CreateItems(first, Items, 0, Investments, Rewards, LevelValue, StructValue, StructRewards)
                </li>
            </ul>
        }
        <div class="scroll-btn">
            <a class="scroll-btn-up"></a>
            <div>
                <a class="scroll-btn-left"></a>
                <a class="scroll-btn-right"></a>
            </div>
            <a class="scroll-btn-down"></a>
        </div>
    </div>
</div>
@if (Model.MarketingType == MarketingTypeView.Camulative)
{
    @Html.Partial("_StructCamulativeInfo")
}
else
{
    @Html.Partial("_StructInvestInfo")
}