@model WayWealth.ViewModels.Sign.UpView
@using Recaptcha.Web.Mvc;
@{
    ViewBag.Title = Resources.Resource.SignUpText;
    TempData.Keep();
    string Inviter = TempData["Inviter"] as string;
}

<div class="white-bg">
    <div class="container">
        <div class="reg-block">
            <h2 class="section-title">
                @if (!string.IsNullOrWhiteSpace(Inviter))
                {
                    @Resources.Resource.SignUpPartnerText
                }
                else
                {
                    @Resources.Resource.SignUpText
                }
            </h2>
            

            @using (Html.BeginForm("up", "sign", new { inviter = Inviter }, FormMethod.Post, new { id = "reg-form" }))
            {
            <div class="row">
                <div class="reg-block-inviter">
                    <div class="input mauto form-group">
                        @Html.LabelFor(x => x.InviterTxt)
                        @if (string.IsNullOrWhiteSpace(Inviter))
                        {
                            @Html.TextBoxFor(x => x.InviterTxt)
                            <p class="inviter">@Resources.Resource.InviterTxt2</p>
                        }
                        else
                        {
                            <p class="val">@TempData["inviterName"]</p>
                        }
                    </div>
                </div>
                <div class="flex flex-3">
                    <div>
                        <div class="form-group required">
                            @Html.LabelFor(x => x.LastName, new { @class = "lbl" })
                            @Html.TextBoxFor(x => x.LastName)
                        </div>
                    </div>
                    <div>
                        <div class="form-group required">
                            @Html.LabelFor(x => x.FirstName, new { @class = "lbl" })
                            @Html.TextBoxFor(x => x.FirstName)
                        </div>
                    </div>
                    <div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.MiddleName, new { @class = "lbl" })
                            @Html.TextBoxFor(x => x.MiddleName)
                        </div>
                    </div>
                </div>
                <div class="flex flex-2">
                    <div class="wrap-email">
                        <div class="input mauto form-group required">
                            @Html.LabelFor(x => x.Email, new { @class = "lbl" })
                            @Html.TextBoxFor(x => x.Email)
                        </div>
                    </div>
                    <div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Login, new { @class = "lbl" })
                            @Html.TextBoxFor(x => x.Login)
                        </div>
                    </div>
                </div>
                <div class="flex flex-2">
                    <div class="form-group required">
                        @Html.LabelFor(x => x.Password, new { @class = "lbl" })
                        @Html.PasswordFor(x => x.Password)
                    </div>
                    <div class="form-group required">
                        @Html.LabelFor(x => x.ConfirmPassword, new { @class = "lbl" })
                        @Html.PasswordFor(x => x.ConfirmPassword)
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.Recaptcha(useSsl: Recaptcha.Web.SslBehavior.AlwaysUseSsl)
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-grad" form="reg-form">
                    @Resources.Resource.SignUpText
                </button>
            </div>
            if (!ViewData.ModelState.IsValid)
            {
                @Html.ValidationSummary(false)
            }
            }
        </div>
        @if ((bool)TempData["isLogin"] != true)
        {
        <div class="reg-link-block">
            <a href="@Url.Action("In", "Sign")" class="btn btn-bordered btn-sm">@Resources.Resource.InEntryBtnText</a>
            <a href="@Url.Action("restore", "sign")" class="btn btn-bordered btn-sm">@Resources.Resource.RestoreText</a>
        </div>
        }
    </div>
</div>
